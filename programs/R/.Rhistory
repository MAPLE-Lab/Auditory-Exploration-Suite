savewav(soundfileMonoL)
print("Re-runs script now using the newly created mono sound")
soundfileActive <- (paste0(getwd(), "/", "soundfileMonoL.wav"))
} else {
soundfileActive <- soundfile
}
soundfileActiveRead <- readWave(soundfileActive)
soundfileRead@stereo
numberOfFreqBins <- 256*4
wlValue <- numberOfFreqBins*2
freqBinWidth <- 22050/numberOfFreqBins
soundfileDuration <- (length(soundfileRead@left)/soundfileRead@samp.rate)
timeBinWidth <- (2.98/64)/(1024/numberOfFreqBins) # ERROR: SOMETIMES NEEDS TO BE x2 THIS VALUE, UNKNOWN CAUSE AS OF June 11, 2017
numberOfTimeBins <- round(soundfileDuration/timeBinWidth-0.5) # The -0.5 rounds the number down, as the later functions will do (it seems).
acoustat(soundfileActiveRead, wl = wlValue)
acoustat(soundfileActiveRead, wl = wlValue)
soundfileActiveRead
wlValue
acoustat(soundfileActiveRead, wl = wlValue)
soundMatrix <- stft.ext(file=soundfileActive, wl = wlValue) #, ovlp = 0.5)
thresholdValue = 1
thresholdFunction <- (function(x) if(x < thresholdValue) {x = 0} else x)
soundMatrixThreshold <- soundMatrix # Creates a duplicate matrix
soundMatrixThreshold[] <- vapply(soundMatrix, thresholdFunction, numeric(1)) # Applies the function to the duplicate
View(soundMatrix)
View(soundMatrixThreshold)
soundMatrixThresholdNamed <- soundMatrixThreshold
# Give columns and rows a value that can later be converted into a name.
# Creates sequences of the necessary length.
col_seq = 1:ncol(soundMatrixThresholdNamed)
row_seq = 1:nrow(soundMatrixThresholdNamed)
# Applies the values as names to the matrix
colnames(soundMatrixThresholdNamed) <- c(paste(col_seq))
rownames(soundMatrixThresholdNamed) <- c(paste(row_seq))
# Name the X axis for frequency bins
colnames(soundMatrixThresholdNamed) <- c(paste(col_seq))
for (i in col_seq) {colnames(soundMatrixThresholdNamed)[i] <- paste(
i*timeBinWidth
)}
# Name the Y axis for time bins
for (i in row_seq) {rownames(soundMatrixThresholdNamed)[i] <- paste(
i*freqBinWidth
)}
View(soundMatrixThresholdNamed)
numberOfHarmonics <- 16 # This value can be changed as necessary.
numberOfHarmonics <- 16 # This value can be changed as necessary.
fundamentalFreq <- 261.63 # In Hz.
harmonicSeq <- seq(from = fundamentalFreq, to = fundamentalFreq*numberOfHarmonics, by = fundamentalFreq)
startingBin <- as.integer(fundamentalFreq / freqBinWidth + 1) # +1 added to round up as it is needed for optimal results, based on trial and error
soundMatrixThresholdNamedTransposed <- t(soundMatrixThresholdNamed)
View(soundMatrixThresholdNamedTransposed)
printer <- soundMatrixThresholdNamedTransposed[,harmonicColSeq[1:numberOfHarmonics]]
harmonicColSeq <- seq(from = startingBin, to = startingBin*numberOfHarmonics, by = 12.2) # Horn synth values
printer <- soundMatrixThresholdNamedTransposed[,harmonicColSeq[1:numberOfHarmonics]]
View(printer)
write.csv(soundMatrixThresholdNamedTransposed, file = "soundMatrixThresholdNamedTransposed.csv")
print("Script completed, switch to SuperCollider now.")
write.csv(printer, file = "soundMatrixThresholdNamedTransposed_select.csv")
harmonicMatrix <- soundMatrixThresholdNamedTransposed[,harmonicColSeq[1:numberOfHarmonics]]
harmonicMatrix[,1]
harmonicMatrix.1 <- harmonicMatrix[,1]
comma_intensity_array <- paste(as.character(harmonicMatrix[,1]), collapse=",")
harmonicMatrix.1.array <- paste(as.character(harmonicMatrix[,1]), collapse=",")
harmonicMatrix.1.array
write(harmonicMatrix.1.array, file = "harmonicMatrix.1.array")
write(harmonicMatrix.1.array, file = "harmonicMatrix.1.array.txt")
timeRawArray <- rep(timeBinWidth, each = (numberOfTimeBins-1))
timeRawArray.print <- paste(as.character(timeRawArray), collapse=",")
write(timeRawArray.print, file = "timeRawArray.print.txt")
for(i in 1:numberOfHarmonics) {}
for(i in 1:numberOfHarmonics) {
print(i)
}
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_name)
}
temp_harmonicMatrix_name
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_name)
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
print(temp_harmonicMatrix_values)
}
?assign(sound_matrix_name, sound_matrix)
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_name)
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
print(temp_harmonicMatrix_values)
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
}
for(i in 1:numberOfHarmonics) {
##print(i)
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
##print(temp_harmonicMatrix_name)
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
##print(temp_harmonicMatrix_values)
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
}
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
##write(temp_harmonicMatrix_array_value, file = temp_harmonicMatrix_print_name)
}
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
write(temp_harmonicMatrix_array_value, file = temp_harmonicMatrix_print_name)
}
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
write(as.name(temp_harmonicMatrix_array_value), file = temp_harmonicMatrix_print_name)
}
write(as.name(temp_harmonicMatrix_array_value), file = temp_harmonicMatrix_print_name)
harmonicMatrix.16.array
print(as.name(temp_harmonicMatrix_array_value))
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(as.name(temp_harmonicMatrix_array_value))
write(as.name(temp_harmonicMatrix_array_value), file = temp_harmonicMatrix_print_name)
}
value <- 1:5
for (i in 1:2) {
x <- paste("varname",i, sep="")
eval(call("<-", as.name(x), value))
}
as.name(temp_harmonicMatrix_array_value)
as.object(temp_harmonicMatrix_array_value)
parse(temp_harmonicMatrix_array_value)
harmonicMatrix.16.array
for(i in 1:numberOfHarmonics) {
##print(i)
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
##print(temp_harmonicMatrix_name)
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
##print(temp_harmonicMatrix_values)
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
print(temp_harmonicMatrix_name)
}
for(i in 1:numberOfHarmonics) {
##print(i)
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
##print(temp_harmonicMatrix_name)
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
##print(temp_harmonicMatrix_values)
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
print(as.name(temp_harmonicMatrix_name))
}
# This creates all 16 harmonic arrays
for(i in 1:numberOfHarmonics) {
##print(i)
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
##print(temp_harmonicMatrix_name)
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
##print(temp_harmonicMatrix_values)
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
print(eval(parse(temp_harmonicMatrix_name)))
}
for(i in 1:numberOfHarmonics) {
##print(i)
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
##print(temp_harmonicMatrix_name)
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
##print(temp_harmonicMatrix_values)
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
View(as.name(temp_harmonicMatrix_name))
}
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(parse(temp_harmonicMatrix_array_value))
##assign(temp_harmonicMatrix_array_value, temp_harmonicMatrix_array_value)
write(as.name(temp_harmonicMatrix_array_value), file = temp_harmonicMatrix_print_name)
##View(as.name(temp_harmonicMatrix_name))
}
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
##assign(temp_harmonicMatrix_array_value, temp_harmonicMatrix_array_value)
write(as.name(temp_harmonicMatrix_array_value), file = temp_harmonicMatrix_print_name)
##View(as.name(temp_harmonicMatrix_name))
}
as.name(temp_harmonicMatrix_array_value)
as.name(temp_harmonicMatrix_array_value)
View(as.name(temp_harmonicMatrix_array_value))
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
##assign(temp_harmonicMatrix_array_value, temp_harmonicMatrix_array_value)
write(View(as.name(temp_harmonicMatrix_array_value)), file = temp_harmonicMatrix_print_name)
##View(as.name(temp_harmonicMatrix_name))
}
?write
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
##assign(temp_harmonicMatrix_array_value, temp_harmonicMatrix_array_value)
write(do.call(temp_harmonicMatrix_array_value), file = temp_harmonicMatrix_print_name)
##View(as.name(temp_harmonicMatrix_name))
}
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
##assign(temp_harmonicMatrix_array_value, temp_harmonicMatrix_array_value)
write((temp_harmonicMatrix_array_value), file = temp_harmonicMatrix_print_name)
##View(as.name(temp_harmonicMatrix_name))
}
temp_harmonicMatrix_array_value
harmonicMatrix.16.array
harmonicMatrix.1.array
write(harmonicMatrix.1.array, file = "harmonicMatrix.1.array.txt")
write(harmonicMatrix.1.array, file = "harmonicMatrix.1.array1.txt")
write(harmonicMatrix.1.array, file = "harmonicMatrix.1.array.print.txt")
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
assign(temp_harmonicMatrix_array_value, as.name(temp_harmonicMatrix_array_value))
write((temp_harmonicMatrix_array_value), file = temp_harmonicMatrix_print_name)
##View(as.name(temp_harmonicMatrix_name))
}
as.name(temp_harmonicMatrix_array_value)
temp_harmonicMatrix_array_value
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
## assign(temp_harmonicMatrix_array_value, as.name(temp_harmonicMatrix_array_value))
##COPIED FROM ABOVE FUNCTION
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
##print(temp_harmonicMatrix_values)
assign(temp_harmonicMatrix_array_value, temp_harmonicMatrix_values)
write((temp_harmonicMatrix_array_value), file = temp_harmonicMatrix_print_name)
##View(as.name(temp_harmonicMatrix_name))
}
temp_harmonicMatrix_array_value
temp_harmonicMatrix_values
assign(temp_harmonicMatrix_array_value, temp_harmonicMatrix_values)
temp_harmonicMatrix_values
temp_harmonicMatrix_array_value
temp_harmonicMatrix_array_value <- temp_harmonicMatrix_values
temp_harmonicMatrix_array_value
for(i in 1:numberOfHarmonics) {
print(i)
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
print(temp_harmonicMatrix_print_name)
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
print(temp_harmonicMatrix_array_value)
## assign(temp_harmonicMatrix_array_value, as.name(temp_harmonicMatrix_array_value))
##COPIED FROM ABOVE FUNCTION
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
##print(temp_harmonicMatrix_values)
temp_harmonicMatrix_array_value <- temp_harmonicMatrix_values
write(temp_harmonicMatrix_array_value, file = temp_harmonicMatrix_print_name)
##View(as.name(temp_harmonicMatrix_name))
}
for(i in 1:numberOfHarmonics) {
##print(i)
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
##print(temp_harmonicMatrix_name)
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
##print(temp_harmonicMatrix_values)
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
##View(as.name(temp_harmonicMatrix_name))
}
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
}
# The time array
timeRawArray <- rep(timeBinWidth, each = (numberOfTimeBins-1))
timeRawArray.print <- paste(as.character(timeRawArray), collapse=",")
write.csv(printer, file = "soundMatrixThresholdNamedTransposed_select.csv")
write.csv(harmonicMatrix, file = "soundMatrixThresholdNamedTransposed_select.csv")
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
temp_harmonicMatrix_array_value <- temp_harmonicMatrix_values
write(temp_harmonicMatrix_array_value, file = temp_harmonicMatrix_print_name)
}
write(timeRawArray.print, file = "timeRawArray.print.txt")
print("Script completed, switch to SuperCollider now.")
temp_harmonicMatrix_array_value
temp_harmonicMatrix_print_name
harmonicMatrix.16.array
harmonicMatrix.1.array
max(harmonicMatrix.1.array)
which.max(harmonicMatrix.1.array)
max(harmonicMatrix.1.array, na.rm = TRUE)
max(harmonicMatrix.1.array, na.rm = FALSE)
which.max(harmonicMatrix.1.array, na.rm = TRUE)
View(harmonicMatrix)
max(harmonicMatrix, na.rm = TRUE)
scaleFunction <- (function(x) x/(max(harmonicMatrix, na.rm = TRUE)))
harmonicMatrixScaled <- harmonicMatrix # Creates a duplicate matrix
harmonicMatrixScaled <- vapply(harmonicMatrix, scaleFunction, numeric(1))
View(harmonicMatrixScaled)
harmonicMatrixScaled <- vapply(harmonicMatrix, scaleFunction)
harmonicMatrixScaled <- harmonicMatrix # Creates a duplicate matrix
harmonicMatrixScaled <- vapply(harmonicMatrix, scaleFunction)
harmonicMatrixScaled <- harmonicMatrix # Creates a duplicate matrix
View(harmonicMatrixScaled)
maximumValue <- max(harmonicMatrix, na.rm = TRUE)
maximumValue
scaleFunction <- (function(x) x/maximumValue)
scaleFunction
harmonicMatrixScaled <- harmonicMatrix # Creates a duplicate matrix
harmonicMatrixScaled <- vapply(harmonicMatrix, scaleFunction, numeric(1))
View(harmonicMatrixScaled)
?vapply(
)
harmonicMatrixScaled <- vapply(harmonicMatrix, scaleFunction, x)
harmonicMatrixScaled <- vapply(harmonicMatrix, scaleFunction, numeric)
harmonicMatrixScaled <- vapply(harmonicMatrix, scaleFunction, numeric(5))
harmonicMatrixScaled <- vapply(harmonicMatrix, scaleFunction, numeric(1))
harmonicMatrixScaled <- harmonicMatrix # Creates a duplicate matrix
harmonicMatrixScaled <- sapply(harmonicMatrix, scaleFunction, numeric(1))
harmonicMatrixScaled <- sapply(harmonicMatrix, scaleFunction)
View(harmonicMatrixScaled)
harmonicMatrixScaled <- harmonicMatrix # Creates a duplicate matrix
harmonicMatrixScaled[] <- vapply(harmonicMatrix, scaleFunction, numeric(1))
View(harmonicMatrixScaled)
# This creates all 16 harmonic arrays
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrix_name = paste("harmonicMatrix", i, "array", sep = ".")
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
}
# The time array
timeRawArray <- rep(timeBinWidth, each = (numberOfTimeBins-1))
timeRawArray.print <- paste(as.character(timeRawArray), collapse=",")
# STEP 8 - EXPORT files
# Input: All precalculated by previous functions.
# Output: The exported CSV and TEXT files will be used by MAESTRO (SuperCollider component) to generate the synthesized sound.
write.csv(harmonicMatrix, file = "soundMatrixThresholdNamedTransposed_select.csv")
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrix_print_name = paste("harmonicMatrix", i, "array.print.txt", sep = ".")
temp_harmonicMatrix_array_value <- paste("harmonicMatrix", i, "array", sep = ".")
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrix[,i]), collapse=",")
temp_harmonicMatrix_array_value <- temp_harmonicMatrix_values
write(temp_harmonicMatrix_array_value, file = temp_harmonicMatrix_print_name)
}
write(timeRawArray.print, file = "timeRawArray.print.txt")
print("Script completed, switch to SuperCollider now.")
# This creates all 16 harmonic arrays
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrix_name = paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
assign(temp_harmonicMatrix_name, temp_harmonicMatrix_values)
}
# The time array
timeRawArray <- rep(timeBinWidth, each = (numberOfTimeBins-1))
timeRawArray.print <- paste(as.character(timeRawArray), collapse=",")
# STEP 8 - EXPORT files
# Input: All precalculated by previous functions.
# Output: The exported CSV and TEXT files will be used by MAESTRO (SuperCollider component) to generate the synthesized sound.
write.csv(harmonicMatrix, file = "soundMatrixThresholdNamedTransposed_select.csv")
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrix_print_name = paste("harmonicMatrixScaled", i, "array.print.txt", sep = ".")
temp_harmonicMatrix_array_value <- paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
temp_harmonicMatrix_array_value <- temp_harmonicMatrix_values
write(temp_harmonicMatrix_array_value, file = temp_harmonicMatrix_print_name)
}
write(timeRawArray.print, file = "timeRawArray.print.txt")
print("Script completed, switch to SuperCollider now.")
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrix_print_name = paste("harmonicMatrixScaled", i, "array.print.txt", sep = ".")
temp_harmonicMatrix_array_value <- paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
temp_harmonicMatrix_array_value <- temp_harmonicMatrix_values
write(temp_harmonicMatrix_array_value, file = temp_harmonicMatrix_print_name)
}
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrix_print_name = paste("harmonicMatrixScaled", i, "array.print.txt", sep = ".")
temp_harmonicMatrix_array_value <- paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrix_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
temp_harmonicMatrix_array_value <- temp_harmonicMatrix_values
write(temp_harmonicMatrix_array_value, file = temp_harmonicMatrix_print_name)
}
# This creates all 16 harmonic arrays
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrixScaled_name = paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
assign(temp_harmonicMatrixScaled_name, temp_harmonicMatrixScaled_values)
}
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrixScaled_print_name = paste("harmonicMatrixScaled", i, "array.print.txt", sep = ".")
temp_harmonicMatrixScaled_array_value <- paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
temp_harmonicMatrixScaled_array_value <- temp_harmonicMatrix_values
write(temp_harmonicMatrixScaled_array_value, file = temp_harmonicMatrixScaled_print_name)
}
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrixScaled_print_name = paste("harmonicMatrixScaled", i, "array.print.txt", sep = ".")
temp_harmonicMatrixScaled_array_value <- paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
temp_harmonicMatrixScaled_array_value <- temp_harmonicMatrixScaled_values
write(temp_harmonicMatrixScaled_array_value, file = temp_harmonicMatrixScaled_print_name)
}
temp_harmonicMatrixScaled_array_value_bounded <- paste0("[", temp_harmonicMatrixScaled_array_value, "]")
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrixScaled_print_name = paste("harmonicMatrixScaled", i, "array.print.txt", sep = ".")
temp_harmonicMatrixScaled_array_value <- paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
temp_harmonicMatrixScaled_array_value <- temp_harmonicMatrixScaled_values
temp_harmonicMatrixScaled_array_value_bounded <- paste0("[", temp_harmonicMatrixScaled_array_value, "]")
write(temp_harmonicMatrixScaled_array_value, file = temp_harmonicMatrixScaled_print_name)
}
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrixScaled_print_name = paste("harmonicMatrixScaled", i, "array.print.txt", sep = ".")
temp_harmonicMatrixScaled_array_value <- paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
temp_harmonicMatrixScaled_array_value <- temp_harmonicMatrixScaled_values
temp_harmonicMatrixScaled_array_value_bounded <- paste0("[", temp_harmonicMatrixScaled_array_value, "]")
write(temp_harmonicMatrixScaled_array_value_bounded, file = temp_harmonicMatrixScaled_print_name)
}
timeArray.print <- paste0("[", timeRawArray.print, "]")
write(timeArray.print, file = "timeRawArray.print.txt")
print("Script completed, switch to SuperCollider now.")
scaleFunction <- (function(x) x) ## /maximumValue) REMOVED FOR NOW
harmonicMatrixScaled <- harmonicMatrix # Creates a duplicate matrix
harmonicMatrixScaled[] <- vapply(harmonicMatrix, scaleFunction, numeric(1)) # Scales all values to be between 0-1.
# This creates all 16 harmonic arrays
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrixScaled_name = paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
assign(temp_harmonicMatrixScaled_name, temp_harmonicMatrixScaled_values)
}
# The time array
timeRawArray <- rep(timeBinWidth, each = (numberOfTimeBins-1))
timeRawArray.print <- paste(as.character(timeRawArray), collapse=",")
timeArray.print <- paste0("[", timeRawArray.print, "]")
# STEP 8 - EXPORT files
# Input: All precalculated by previous functions.
# Output: The exported CSV and TEXT files will be used by MAESTRO (SuperCollider component) to generate the synthesized sound.
write.csv(harmonicMatrixScaled, file = "harmonicMatrixScaled.csv")
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrixScaled_print_name = paste("harmonicMatrixScaled", i, "array.print.txt", sep = ".")
temp_harmonicMatrixScaled_array_value <- paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
temp_harmonicMatrixScaled_array_value <- temp_harmonicMatrixScaled_values
temp_harmonicMatrixScaled_array_value_bounded <- paste0("[", temp_harmonicMatrixScaled_array_value, "]")
write(temp_harmonicMatrixScaled_array_value_bounded, file = temp_harmonicMatrixScaled_print_name)
}
write(timeArray.print, file = "timeRawArray.print.txt")
print("Script completed, switch to SuperCollider now.")
harmonicMatrixScaled[] <- vapply(harmonicMatrix, scaleFunction, numeric(1)) # Scales all values to be between 0-1.
scaleFunction <- (function(x) x/maximumValue)
harmonicMatrixScaled <- harmonicMatrix # Creates a duplicate matrix
harmonicMatrixScaled[] <- vapply(harmonicMatrix, scaleFunction, numeric(1)) # Scales all values to be between 0-1.
# This creates all 16 harmonic arrays
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrixScaled_name = paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
assign(temp_harmonicMatrixScaled_name, temp_harmonicMatrixScaled_values)
}
# The time array
timeRawArray <- rep(timeBinWidth, each = (numberOfTimeBins-1))
timeRawArray.print <- paste(as.character(timeRawArray), collapse=",")
timeArray.print <- paste0("[", timeRawArray.print, "]")
# STEP 8 - EXPORT files
# Input: All precalculated by previous functions.
# Output: The exported CSV and TEXT files will be used by MAESTRO (SuperCollider component) to generate the synthesized sound.
write.csv(harmonicMatrixScaled, file = "harmonicMatrixScaled.csv")
for(i in 1:numberOfHarmonics) {
temp_harmonicMatrixScaled_print_name = paste("harmonicMatrixScaled", i, "array.print.txt", sep = ".")
temp_harmonicMatrixScaled_array_value <- paste("harmonicMatrixScaled", i, "array", sep = ".")
temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
temp_harmonicMatrixScaled_array_value <- temp_harmonicMatrixScaled_values
temp_harmonicMatrixScaled_array_value_bounded <- paste0("[", temp_harmonicMatrixScaled_array_value, "]")
write(temp_harmonicMatrixScaled_array_value_bounded, file = temp_harmonicMatrixScaled_print_name)
}
write(timeArray.print, file = "timeRawArray.print.txt")
print("Script completed, switch to SuperCollider now.")
