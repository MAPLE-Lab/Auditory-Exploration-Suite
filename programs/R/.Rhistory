# 256*4 (1024) frequency bins appears to be a good number for general use.
# Input: In the line "numberOfFreqBins <- 256*4", change the multiplier (i.e. 4) to the desired amount.
# Output: wlValue will be used in following functions. freqBinWidth gives the frequency range of each bin.
freqParameters(frequencyResolution)
# Input: Nothing on the user's end. All values are generated from the previous functions.
# Output: soundfileDuration gives the duration of the sound file in seconds. timeBinWidth gives the width of each time bin in seconds. numberOfTimeBins gives the number of time bins that will be created by the software.
timeParameters(soundfileActiveRead)
# Input: The wlValue calculated previously and the active soundfile path (designated in STEP 4).
# Output: A visual overview of the time envelope and frequency spectrum of the soundfileActive.
acoustat(soundfileActiveRead, wl = wlValue)
# STEP 6 - EXTRACT FREQUENCYxTIME DATA
# The following function will create the data table that shows the changing intensity values of frequencies over time.
# Everything below the threshold value will be erased to reduce noise.
soundAnalysis(file=soundfileActive, wl = wlValue, thresholdValue = thresholdValue)
# STEP 7 - ISOLATE HARMONICS
# Top-down method: User selects number of harmonics and the fundamental
# Only the 16 (or specified) number of harmonics are required.
# Input: The numberOfHarmonics and the fundamentalFreq values.
# Outpit: A data table with only the rows of the desired harmonics.
numberOfHarmonics <- 16 # This value can be changed as necessary.
fundamentalFreq <- 261.63 # In Hz.
isolateHarmonics() # Uses many arguments, so currently does not allow changes to arguments for simplicity of use
# Time Warning: This could take a minute or longer depending on the amount of data
# This creates all 16 harmonic arrays
#for(i in 1:numberOfHarmonics) {
#  temp_harmonicMatrixScaled_name = paste("harmonicMatrixScaled", i, "array", sep = ".")
#  temp_harmonicMatrixScaled_values <- paste(as.character(harmonicMatrixScaled[,i]), collapse=",")
#  assign(temp_harmonicMatrixScaled_name, temp_harmonicMatrixScaled_values)
#}
# STEP 8 - PLOT
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
# STEP 9 - EXPORT files
# Input: All precalculated by previous functions.
# Output: The exported TEXT files will be used by MAESTRO (SuperCollider component) to generate the synthesized sound.
# The time array
# timeArray()
# Full print of two files, the harmonics table and the time array:
exportMAESTRO()
print("Script completed, switch to SuperCollider now.")
?plot_ly
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = ~harmonic, colors = Blues)
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = ~harmonic, colors = Blues)
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = I("black"))
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = "black")
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = I("black"), group_by(~harmonic))
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = I("black"), split(~harmonic))
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = I("black"), split(~harmonics, col(~harmonics)))
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = I(~harmonics)) # group_by()?
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = I(~harmonics)) # group_by()?
p
}
# STEP 9 - EXPORT files
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = ~harmonics) # group_by()?
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = harmonics) # group_by()?
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = I(~harmonic)) # group_by()?
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = I("black"), group_by(~harmonic)) # group_by()?
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
# Create data frame with all harmonic data for use in plot_ly
plotMAESTRO <- function() {
# List the length of the harmonicMatrixScaled to allow the name to be repeated
harmonicDataframeLengthSeq = seq(1:nrow(harmonicMatrixScaled))
# FOR Loop to process all harmonics, creates data frame of the form:
# "time"  "intensity" "harmonic"
# Name of files are of the form "plotsHarmonicData.i" where i = 1:numberOfHarmonics
for(i in 1:numberOfHarmonics) {
#print(i)
temp_plot_dataframe <- data.frame(
intensity=c(harmonicMatrixScaled[,i])
)
temp_name_list <- rep(as.character(i), length(harmonicDataframeLengthSeq)) # plot_ly does not work if the names are not CHARACTERS
#print(temp_name_list)
temp_time_intensity_harmonic <- cbind(rownames(harmonicMatrixScaled), temp_plot_dataframe, temp_name_list)
colnames(temp_time_intensity_harmonic) <- c("time", "intensity", "harmonic")
temp_plot_dataframe_name <- paste("plotsHarmonicData", i, sep = ".")
assign(temp_plot_dataframe_name, temp_time_intensity_harmonic)
}
# Combine all the data
for(i in 2:numberOfHarmonics) {
plotsHarmonicData.1 # Known at minimum there is the 1st harmonic used
temp_lister_name <- paste0("plotsHarmonicData.", i)
if(i == 2) {
temp_total_names <- paste("plotsHarmonicData.1,",temp_lister_name)   # Clears any old data automatically as well
} else {
#print(i)
#print(temp_total_names)
temp_total_names <- paste(temp_total_names, temp_lister_name, sep = ", ")
#print(temp_total_names)
#print("Next step:")
}
}
#test_bind <- rbind(plotsHarmonicData.1, plotsHarmonicData.2, plotsHarmonicData.3, plotsHarmonicData.4, plotsHarmonicData.5, plotsHarmonicData.6, plotsHarmonicData.7, plotsHarmonicData.8, plotsHarmonicData.9, plotsHarmonicData.10)
test_bind <- eval(parse(text=paste0("rbind(", temp_total_names, ")")))
# Use the combined data for the plot
p <- plot_ly(test_bind, x = ~time, y = ~harmonic, z = ~intensity, type = 'scatter3d', mode = 'lines', color = ~harmonic) # group_by()?
p
}
plotMAESTRO() # Time Warning: This could take a minute or longer depending on the amount of data
